{"mappings":"AAAA,MAAM,SAAS;IACb;IACA;AACF;AAEA,SAAS,cAAc,IAAI,EAAE,KAAK,EAAE,GAAG,QAAQ;IAC7C,OAAO;QACL;QACA,OAAO;YACL,GAAG,KAAK;YACR;;;MAGA,GACA,UAAU,SAAS,IAAI,CAAC,QACtB,OAAO,UAAU,WAAW,QAAQ,kBAAkB;QAE1D;IACF;AACF;AAEA,SAAS,kBAAkB,IAAI;IAC7B,OAAO;QACL,MAAM;QACN,OAAO;YACL,WAAW;YACX,UAAU,EAAE;QACd;IACF;AACF;AAGA,MAAM,KAAK;IACT,MAAM;IACN,OAAO;QACL,WAAW;QACX,UAAS;YACP;gBACE,MAAM;gBACN,OAAO;oBACL,UAAU;wBACR;4BACE,MAAM;4BACN,OAAO;gCACL,WAAW;gCACX,UAAS,EAAE;4BACd;wBACD;qBACD;gBACH;YACF;YACA;gBACE,MAAM;gBACN,OAAM;oBACJ,UAAS;wBACT;4BACE,MAAM;4BACN,OAAO;gCACL,WAAW;gCACX,UAAU,EAAE;4BACd;wBACF;qBACC;gBACH;YACF;SACD;IACH;AACF;AAEA,SAAS,OAAO,OAAO,EAAE,SAAS;IAChC,MAAM,MACJ,QAAQ,QAAQ,iBACZ,SAAS,eAAe,MACxB,SAAS,cAAc,QAAQ;IAErC,qEAAqE;IACrE,OAAO,KAAK,QAAQ,OACjB,OAAO,CAAA,MAAO,QAAM,YACpB,QAAQ,CAAC,OAAU,GAAG,CAAC,KAAK,GAAG,QAAQ,KAAK,CAAC,KAAK;IAEnD;;;IAGA,GACA,QAAQ,MAAM,SAAS,QAAQ,CAAA;QAC7B,OAAO,OAAO;IAChB;IAEA,UAAU,YAAY;AAE1B;AAEA,8BAA8B,GAC9B,MAAM,wBACJ,AAFF,qBAEG;IAAI,WAAU;;;;;;;iBACb,AAHJ,qBAGK;;;;;;;GAAG,8BACJ,AAJJ,qBAIK;;;;;;;GAAE;AAIP,MAAM,OAAO,SAAS,eAAe;AAErC,OAAO,OAAO,SAAS","sources":["index.jsx"],"sourcesContent":["const Zitact = {\r\n  createElement,\r\n  render,\r\n};\r\n\r\nfunction createElement(type, props, ...children) {\r\n  return {\r\n    type,\r\n    props: {\r\n      ...props,\r\n      /* here we are checking this because the children of any react element can just be text\r\n       or number //////// (primitives).  So, we have to handle them seperately as while rendernig\r\n       recursively it can be a problem.\r\n      */\r\n      children: children.map((child) =>\r\n        typeof child === \"object\" ? child : createTextElement(child)\r\n      ),\r\n    },\r\n  };\r\n}\r\n\r\nfunction createTextElement(text) {\r\n  return {\r\n    type: \"TEXT_ELEMENT\",\r\n    props: {\r\n      nodeValue: text,\r\n      children: [],\r\n    },\r\n  };\r\n}\r\n\r\n\r\nconst el = {\r\n  type: 'div', \r\n  props: {\r\n    className: 'id',\r\n    children:[\r\n      {\r\n        type: 'h1',\r\n        props: {\r\n          children: [\r\n            {\r\n              type: 'TEXT_ELEMENT',\r\n              props: {\r\n                nodeValue: 'Hello World',\r\n                children:[],\r\n             }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        type: 'p',\r\n        props:{\r\n          children:[ \r\n          {\r\n            type: \"TEXT_ELEMENT\",\r\n            props: {\r\n              nodeValue: 'lorem',\r\n              children: []\r\n            }\r\n          }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nfunction render(element, container) {\r\n  const dom =\r\n    element.type == \"TEXT_ELEMENT\"\r\n      ? document.createTextNode(\"\")\r\n      : document.createElement(element.type);\r\n \r\n  //filering children from the props and assigning remaining to the dom\r\n  Object.keys(element.props)\r\n    .filter(key => key!=='children')\r\n    .forEach((name) => (dom[name] = element.props[name]));\r\n\r\n    /*\r\n    Recursiverly going through the childrren and appending to the parent container after finish of each \r\n    children pass.\r\n    */\r\n    element.props.children.forEach(child=> {\r\n      render(child, dom)\r\n    })\r\n\r\n    container.appendChild(dom);\r\n    \r\n}\r\n\r\n/** @jsx Zitact.createElement */\r\nconst element = (\r\n  <div className=\"id\">\r\n    <h1>Hello world</h1>\r\n    <p>Lorem eiciendis eos laborum deserunt vero adipisci aliquid voluptates ratione ex!</p>\r\n  </div>\r\n);\r\n\r\nconst root = document.getElementById(\"root\");\r\n\r\nZitact.render(element, root);"],"names":[],"version":3,"file":"index.93d55021.js.map","sourceRoot":"/__parcel_source_root/"}